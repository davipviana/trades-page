{"version":3,"sources":["../../app-es6/dao/TradeDao.js"],"names":["TradeDao","connection","_connection","_store","trade","Promise","resolve","reject","request","transaction","objectStore","add","onsuccess","onerror","e","target","error","cursor","openCursor","trades","current","result","value","push","Trade","_date","_amount","_value","continue","clear"],"mappings":";;;;;;IAAMA,Q;AACF,sBAAYC,UAAZ,EAAwB;AAAA;;AACpB,aAAKC,WAAL,GAAmBD,UAAnB;AACA,aAAKE,MAAL,GAAc,QAAd;AACH;;;;4BAEGC,K,EAAO;AAAA;;AACP,mBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,oBAAIC,UAAU,MAAKN,WAAL,CACTO,WADS,CACG,CAAC,MAAKN,MAAN,CADH,EACkB,WADlB,EAETO,WAFS,CAEG,MAAKP,MAFR,EAGTQ,GAHS,CAGLP,KAHK,CAAd;;AAKAI,wBAAQI,SAAR,GAAoB;AAAA,2BAAKN,SAAL;AAAA,iBAApB;AACAE,wBAAQK,OAAR,GAAkB;AAAA,2BAAKN,OAAOO,EAAEC,MAAF,CAASC,KAAhB,CAAL;AAAA,iBAAlB;AACH,aARM,CAAP;AASH;;;iCAEQ;AAAA;;AACL,mBAAO,IAAIX,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,oBAAIU,SAAS,OAAKf,WAAL,CACRO,WADQ,CACI,CAAC,OAAKN,MAAN,CADJ,EACmB,UADnB,EAERO,WAFQ,CAEI,OAAKP,MAFT,EAGRe,UAHQ,EAAb;;AAKA,oBAAIC,SAAS,EAAb;AACAF,uBAAOL,SAAP,GAAmB,aAAK;AACpB,wBAAIQ,UAAUN,EAAEC,MAAF,CAASM,MAAvB;AACA,wBAAGD,OAAH,EAAY;AACR,4BAAIhB,QAAQgB,QAAQE,KAApB;AACAH,+BAAOI,IAAP,CAAY,IAAIC,KAAJ,CAAUpB,MAAMqB,KAAhB,EAAuBrB,MAAMsB,OAA7B,EAAsCtB,MAAMuB,MAA5C,CAAZ;;AAEAP,gCAAQQ,QAAR;AACH,qBALD,MAKO;AACHtB,gCAAQa,MAAR;AACH;AACJ,iBAVD;;AAYAF,uBAAOJ,OAAP,GAAiB,aAAK;AAClBN,2BAAOO,EAAEC,MAAF,CAASC,KAAhB;AACH,iBAFD;AAGH,aAtBM,CAAP;AAuBH;;;gCAEO;AAAA;;AACJ,mBAAO,IAAIX,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,oBAAIC,UAAU,OAAKN,WAAL,CACTO,WADS,CACG,CAAC,OAAKN,MAAN,CADH,EACkB,WADlB,EAETO,WAFS,CAEG,OAAKP,MAFR,EAGT0B,KAHS,EAAd;;AAKArB,wBAAQI,SAAR,GAAoB;AAAA,2BAAKN,SAAL;AAAA,iBAApB;AACAE,wBAAQK,OAAR,GAAkB;AAAA,2BAAKN,OAAOO,CAAP,CAAL;AAAA,iBAAlB;AACH,aARM,CAAP;AASH","file":"TradeDao.js","sourcesContent":["class TradeDao {\r\n    constructor(connection) {\r\n        this._connection = connection;\r\n        this._store = 'trades';\r\n    }\r\n\r\n    add(trade) {\r\n        return new Promise((resolve, reject) => {\r\n            let request = this._connection\r\n                .transaction([this._store], 'readwrite')\r\n                .objectStore(this._store)\r\n                .add(trade);\r\n\r\n            request.onsuccess = e => resolve();\r\n            request.onerror = e => reject(e.target.error);\r\n        });\r\n    }\r\n\r\n    getAll() {\r\n        return new Promise((resolve, reject) => {\r\n            let cursor = this._connection\r\n                .transaction([this._store], 'readonly')\r\n                .objectStore(this._store)\r\n                .openCursor();\r\n\r\n            let trades = [];\r\n            cursor.onsuccess = e => {\r\n                let current = e.target.result;\r\n                if(current) {\r\n                    let trade = current.value;\r\n                    trades.push(new Trade(trade._date, trade._amount, trade._value));\r\n\r\n                    current.continue();\r\n                } else {\r\n                    resolve(trades);\r\n                }\r\n            }\r\n\r\n            cursor.onerror = e => {\r\n                reject(e.target.error);\r\n            }\r\n        });\r\n    }\r\n\r\n    clear() {\r\n        return new Promise((resolve, reject) => {\r\n            let request = this._connection\r\n                .transaction([this._store], 'readwrite')\r\n                .objectStore(this._store)\r\n                .clear();\r\n\r\n            request.onsuccess = e => resolve();\r\n            request.onerror = e => reject(e);\r\n        });\r\n    }\r\n}"]}